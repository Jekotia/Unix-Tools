#! /bin/bash

configDir=$HOME/.config/connect
configFile=connect.conf
hostsDir=$configDir/hosts

## END CONFIGURABLE VARS ##



targetHost=$2
selProto=$1
arg=$3
argFile=$4
conn_tools="add rm"

function writeConfig() {
	if [ ! -e $configDir/$configFile ] ; then
		if [ ! -e $configDir ] ; then
			mkdir -p $configDir
		fi
		touch $configDir/$configFile
		echo "# Config file for \`connect\` shell script" >> $configFile
		echo "# default key file" >> $configFile
		echo "keyFile=\"~/.ssh/id_jameli\"" >> $configFile
		echo "# protocols to include" >> $configFile
		echo "conn_protocols=\"ssh sftp copy-id\"" >> $configFile
		echo "#" >> $configFile
		echo "conf_install=\"true\"" >> $configFile
	fi
	if [ ! -e $hostsDir ] ; then
		mkdir $hostsDir
	fi
}

writeConfig

source $configDir/$configFile

if [[ "$conf_install" == "true" ]] ; then conn_tools="$conn_tools install" ; installFile="$HOME/.zsh/shell-remote.sh" ; fi

declare -A conn

function connect_importHosts () {
	k=1

	local initDir=`pwd`
	cd $hostsDir
	for i in * ; do
		if test -f "$i" ; then
			if [[ "$k" -lt "10" ]] ; then k=1$k ; fi
			#echo $k
			#echo $i
			source $i
			conn[$k,name]=$i
			conn[$k,user]=$user
			conn[$k,host]=$host
			conn[$k,port]=$port
			if [[ "$key" == "" ]] ; then
		   		conn[$k,key]=$keyFile
			else
				conn[$k,key]=$key
			fi
			#if [[ "$term" == "" ]] ; then
				conn[$k,term]=$term
			#fi
			conn[$k,cmd]=$cmd

			user=""
			host=""
			key=""
			term=""
			cmd=""
		fi
		((k++))
	done
	cd $initDir
	#echo ${conn[@]}
}

function connect_readHosts () {
	for i in "${!conn[@]}"
	do
		iKey="$i"
		iVal="${conn[$i]}"
		if [[ "$i" == *",name" ]] ; then
			conn_hosts+="$iVal "
			if [[ "$iVal" == "$targetHost" ]] ; then
				selConn=${iKey:0:2}
				if [[ "$conn_tools" != *"$selProto"* ]] ; then
					if [[ "$conn_protocols" != *"$selProto"* ]] ; then
						echo Error: Unsupported protocol specified.
						connect_usage
						exit 2
					else
						return 0
					fi
				fi
			fi
		fi
	done
	return 1
}

function connect_connectHost () {
	# Let's build a command!
	# FOR SSH
	if [[ "$selProto" == "ssh" ]] ; then
		# DEFINE THE TERM, IF CONFIGURED
		if [[ ${conn[$selConn,term]} != "" ]] ; then
			conCmd=TERM="${conn[$selConn,term]} "
		fi
		# IF CMD IS SET, ADD -t ARG
		if [[ ${conn[$selConn,cmd]} == "" ]] ; then # || "$arg" == "run" ]] ; then
			conCmd="${conCmd}ssh -i"
		else
			conCmd="${conCmd}ssh -ti"
		fi
	# FOR SFTP
	elif [[ "$selProto" == "sftp" ]] ; then
		conCmd="sftp -i"
	elif [[ "$selProto" == "copy-id" ]] ; then
		conCmd="ssh-copy-id -i"
	fi

	conCmd="$conCmd ${conn[$selConn,key]}"
	if [[ "${conn[$selConn,port]}" != "" ]] ; then
		#echo PORT ${conn[$selConn,port]}
		if [[ "$selProto" == "ssh" ]] ; then
			conCmd="${conCmd} -p ${conn[$selConn,port]}"
		elif [[ "$selProto" == "sftp" ]] ; then
			conCmd="${conCmd} -P ${conn[$selConn,port]}"
		elif [[ "$selProto" == "copy-id" ]] ; then
			conCmd="${conCmd} -P ${conn[$selConn,port]}"
		fi
	fi
	conCmd="${conCmd} ${conn[$selConn,user]}@${conn[$selConn,host]}"

	if [[ "${conn[$selConn,cmd]}" != "" && "$selProto" == "ssh" ]] ; then  # && "$arg" != "run" ]] ; then 
		conCmd="${conCmd} ${conn[$selConn,cmd]}"
		conEcho=", and executing ${conn[$selConn,cmd]} when connected"
	fi


	#$conCmd=`echo ${conCmd}`
	#$conCmd

	echo "Connecting to host ${conn[$selConn,host]} as user ${conn[$selConn,user]} with key file ${conn[$selConn,key]}$conEcho"
	#echo "$conCmd"

repeat=true
while "$repeat" ; do
	eval $conCmd && repeat=false
	if $repeat ; then
		echo "Dirty disconnect from remote host `date`. Attempting reconnect..."
		sleep 5
	fi
done


#	eval $conCmd
	exit
}

function connect_usage () {
	echo "usage: $0 { $conn_protocols rm } { $conn_hosts}"
	echo "usage: $0 tools { add }"
}

function connect_add_ui () {
	tmp="/tmp/out.tmp"
	dialog --backtitle "$errors" --title "Add remote host" \
	--form "\n$errors" 25 60 16 \
	"Name:" 1 1 "$hostFile" 1 10 25 30 \
	"Username:" 2 1 "$hostUser" 2 10 25 30 \
	"Hostname:" 3 1 "$hostName" 3 10 25 30 \
	"Port:" 4 1 "$hostPort" 4 10 25 30 \
	"Keyfile:" 5 1 "$hostKey" 5 10 25 30 \
	"Term:" 6 1 "$hostTerm" 6 10 25 30 \
	"Command:" 7 1 "$hostCmd" 7 10 25 30 > $tmp 2>&1 >/dev/tty

	EXIT=$?

	errors=""

	hostFile="`sed -n 1p $tmp`"
	hostUser="`sed -n 2p $tmp`"
	hostName="`sed -n 3p $tmp`"
	hostPort="`sed -n 4p $tmp`"
	 hostKey="`sed -n 5p $tmp`"
	hostTerm="`sed -n 6p $tmp`"
	 hostCmd="`sed -n 7p $tmp`"

	rm -rf $tmp

	if ! test $EXIT -eq 0 ; then exit $EXIT ; fi 
}

function connect_add () {
	first_run=true
	while ! connect_add_validate ; do
		connect_add_ui
	done
	
	if $validate ; then
		connect_add_writeFile
	fi
}	

function connect_add_validate () {
	if $first_run ; then first_run=false ; return 1 ; fi
	
	connect_add_validate_host

	connect_add_validate_user

	connect_add_validate_name

	connect_add_validate_port

	connect_add_validate_key

	connect_add_validate_term

	connect_add_validate_cmd

	if ! $validHost || ! $validUser || ! $validName || ! $validPort || ! $validKey || ! $validTerm || ! $validCmd ; then
		return 1
	fi
	
	validate=true
}

function connect_add_validate_host () {	
	if [[ "$hostFile" == "" ]] ; then
		validHost=false
		errors="${errors}Name cannot be blank\n"
	elif [ ! -e $hostsDir/$hostFile ] ; then
		validHost=true
	else
		validHost=false
		errors="${errors}$hostFile already exists. If you believe this is an error, exit this script and delete the file with \'rm $hostFile\'\n"
	fi
}

function connect_add_validate_user () {
	if [ "$hostUser" == "" ] ; then
		validUser=false
		errors="${errors}Username cannot be blank\n"
	else
		validUser=true
	fi
}

function connect_add_validate_name () {
	if [ "$hostName" == "" ] ; then
		validName=false
		errors="${errors}Hostname cannot be blank\n"
	else
		validName=true
	fi
}

function connect_add_validate_port () {
	if [[ "$hostPort" == "" ]] ; then
		validPort=true
	elif [[ ! "$hostPort" =~ ^[0-9]+$ ]] ; then
		validPort=false
		errors="${errors}Port must be a number\n"
	else
		validPort=true
	fi
}

function connect_add_validate_key () {
	if [ "$hostKey" == "" ] ; then
		validKey=true
	elif [ ! -e $hostKey ] ; then
		validKey=false
		printf "The specified file does not exist\n"
	elif [ -e $hostKey ] ; then
		validKey=true
	else
		echo "(╯°□°）╯︵ ┻━┻"
		exit 666
	fi
}

function connect_add_validate_term () {
	if [ "$hostTerm" == "" ] ; then
		validTerm=true
	else
		validTerm=true
	fi
}

function connect_add_validate_cmd () {
	if [ "$hostCmd" == "" ] ; then
		validCmd=true
	else
		validCmd=true
	fi
}

function connect_add_writeFile () {
	touch ${hostsDir}/${hostFile}

	cat <<EOM >${hostsDir}/${hostFile}
user=$hostUser
host=$hostName
port=$hostPort
key=$hostKey
term=$hostTerm
cmd=$hostCmd
EOM

}

function connect_rm () {
	if [ ! -e $hostsDir/$1 ] ; then
		printf "File $hostsDir/$1 does not exist"
		exit 1
	elif [ -e $hostsDir/$1 ] ; then
		printf "Are you sure you wish to remove $hostsDir/$1? This cannot be undone. Input [y]es to continue, and anything else to cancel... "
		read -r rmConfirm
		if [[ "$rmConfirm" == "y" || "$rmConfirm" == "yes" ]] ; then
			rm -vf $hostsDir/$1
		else
			printf "Action cancelled"
		fi
	fi
	exit 0
}

function connect_install () {
	eval ssh -i ${conn[$selConn,key]} ${conn[$selConn,user]}@${conn[$selConn,host]} 'bash -s' < $installFile
	exit
}

connect_importHosts

if connect_readHosts ; then connect_connectHost ; fi

case "$1" in
	"tools")
		case "$2" in
			"add")
				connect_add
			;;
			"rm")
				connect_rm $3
			;;
			"install")
				connect_install
			;;
		esac
	;;
	"args")
		case "$2" in
			"01")
				echo "$conn_protocols tools"
			;;
			"21")
				echo "$conn_hosts"
			;;
			"22")
				echo "$conn_tools"
			;;
		esac
	;;
	"-h"|"--help")
		connect_usage
	;;
	*)
		connect_usage
		exit 1
	;;
esac
exit 0
